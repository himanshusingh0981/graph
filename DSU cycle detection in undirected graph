#include<iostream>
#include<bits/stdc++.h>
using namespace std;
class Graph{
    int V;
    list<pair<int,int>> l;

    public:
    Graph(int V){
        this->V= V;
    }

    void addEdge(int u, int v){
        l.push_back(make_pair(u,v));
    }

    //Find funciton in DSU
    int find(int i, vector<int>&parent){
        if(parent[i]==-1)
        return i;
        return find(parent[i] , parent);
    }

    //Union Function in DSU
    void union_cycle(int u,int v,vector<int> &parent){
        int s1 = find(u,parent);
        int s2 = find(v,parent);
        //agr u and v ka parent alag he to dono set ka union kr dege mtlb ek hi set me jod dege
        if(s1!=s2){
            parent[s1] = s2;
        }
    }

    bool detect_cycle(){
        //initially sbke parent me -1 dal diya 
        vector<int>parent(V,-1);

        for(auto it: l){
            int u = it.first;
            int v = it.second;
            int s1 = find(u,parent);
            int s2 = find(v,parent);
            if(s1!=s2)
            {
                union_cycle(u,v,parent);
            }
            else{
            cout<<"Cycle present\n";
            return true;
        }
        }
        return false;
    }
};
int main(){
    Graph g(4);
    g.addEdge(0,1);
    g.addEdge(1,2);
    g.addEdge(2,3);
    g.addEdge(3,0);
    if(g.detect_cycle())cout<<"Yes";
    else cout<<"No";
    return 0;
}
